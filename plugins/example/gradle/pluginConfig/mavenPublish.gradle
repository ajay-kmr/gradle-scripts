buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk:1.10.58'
    }
}

apply plugin: "maven-publish"

apply plugin: "signing"

/*

signing {
    sign publishing.publications.mavenJava
}
*/

def projectName = this.name

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

task javadocJar(type: Jar) {
    from javadoc
//    archiveClassifier = 'javadoc'
    classifier = 'javadoc'
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

publishing {
    publications {
        //Has format:- pubName (MavenPublication)
        "-${projectName}-"(MavenPublication) {
            /*Create Jar containing the compiled class file from the java components*/
            from components.java
            /*Include the source code (i.e java files) as well in Jar file*/
            artifact sourceJar
            /*Include Java Doc file*/
            artifact javadocJar
        }
    }
    repositories {
        mavenLocal()
        maven {
            name = "-${projectName}-local-"
            def releasesRepoUrl = "$buildDir/repos/releases "
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
//            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            url = version.endsWith('SNAPSHOT') ? releasesRepoUrl : snapshotsRepoUrl
        }

        /**
         * Refer:- https://docs.gradle.org/current/userguide/repository_types.html
         * S3 URL formats
         * S3 URLâ€™s are 'virtual-hosted-style' and must be in the following format
         *
         * s3://<bucketName>[.<regionSpecificEndpoint>]/<s3Key>
         * e.g. s3://myBucket.s3.eu-central-1.amazonaws.com/maven/release
         *
         * myBucket is the AWS S3 bucket name.
         *
         * s3.eu-central-1.amazonaws.com is the optional region specific endpoint.
         *
         * /maven/release is the AWS S3 key (unique identifier for an object within a bucket)
         *
         * S3 proxy settings
         *
         */

        maven {
            name = "-${projectName}-S3-"
            // arn:aws:s3:::ts-admin-app
            def releasesRepoUrl = "s3://ts-admin-app.s3.ap-south-1.amazonaws.com/maven/release"
            def snapshotsRepoUrl = "s3://ts-admin-app.s3.ap-south-1.amazonaws.com/maven/snapshot"
//            url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
            url = version.endsWith('SNAPSHOT') ? releasesRepoUrl : snapshotsRepoUrl

            /**
             * Authentication can be set as follow:-
             * export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
             * export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
             * export AWS_DEFAULT_REGION=ap-south-1
             */
            authentication {
                //Refer:- com.amazonaws.auth.DefaultAWSCredentialsProviderChain
                awsIm(AwsImAuthentication) // load from EC2 role or env var
            }
            /*
            credentials(AwsCredentials) {
                //Refer:- com.amazonaws.auth.DefaultAWSCredentialsProviderChain
                def defaultCredentials = new com.amazonaws.auth.DefaultAWSCredentialsProviderChain().getCredentials()
                accessKey defaultCredentials.getAWSAccessKeyId()
                secretKey defaultCredentials.getAWSSecretKey()
            }*/
        }
    }
}